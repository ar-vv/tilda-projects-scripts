/**
 * TILDA PROJECTS SCRIPTS - CDN VERSION
 * Автоматически обновляемая версия скриптов
 * CDN: https://ar-vv.github.io/tilda-projects-scripts/
 * Версия: 1.0.0
 */

(function() {
  'use strict';

  // ===========================================
  // СКРИПТ ДЛЯ АНИМАЦИИ РАЗМЫТИЯ И ДВИЖЕНИЯ
  // ===========================================
  function initBlurAnimation() {
    const elements = document.querySelectorAll(".myblur");
    if (elements.length === 0) return;

    elements.forEach(el => {
      const baseBlur = 110; 
      const blurAmp = 15 + Math.random() * 15;
      const blurPeriod = (Math.random() * 6 + 4) * 1000;
      
      const moveRadius = 100;
      const movePeriodX = (Math.random() * 8 + 6) * 1000;
      const movePeriodY = (Math.random() * 8 + 6) * 1000;
      const phaseX = Math.random() * Math.PI * 2;
      const phaseY = Math.random() * Math.PI * 2;

      let start = null;

      function animate(timestamp) {
        if (!start) start = timestamp;
        const elapsed = timestamp - start;

        const blurProgress = (elapsed % blurPeriod) / blurPeriod;
        const blurAngle = blurProgress * 2 * Math.PI;
        const blurValue = baseBlur + Math.sin(blurAngle) * blurAmp;

        const moveProgressX = (elapsed % movePeriodX) / movePeriodX;
        const angleX = moveProgressX * 2 * Math.PI + phaseX;
        const offsetX = Math.cos(angleX) * moveRadius;

        const moveProgressY = (elapsed % movePeriodY) / movePeriodY;
        const angleY = moveProgressY * 2 * Math.PI + phaseY;
        const offsetY = Math.sin(angleY) * moveRadius;

        el.style.filter = `blur(${blurValue}px)`;
        el.style.transform = `translate(${offsetX}px, ${offsetY}px)`;

        requestAnimationFrame(animate);
      }

      requestAnimationFrame(animate);
    });
  }

  // ===========================================
  // СКРИПТ ДЛЯ СТЕКЛЯННОГО ЭФФЕКТА
  // ===========================================
  function initGlassEffect() {
    const ADD_NOISE = true;

    function enhance(atom) {
      if (!atom) return;
      atom.innerHTML = '';

      const glare = document.createElement('div');
      glare.className = 'glx-glare';

      const polish = document.createElement('div');
      polish.className = 'glx-polish';

      const vignette = document.createElement('div');
      vignette.className = 'glx-vignette';

      atom.appendChild(glare);
      atom.appendChild(polish);
      atom.appendChild(vignette);

      if (ADD_NOISE) {
        const noise = document.createElement('div');
        noise.className = 'glx-noise';
        atom.appendChild(noise);
      }
    }

    function init() {
      const atoms = document.querySelectorAll('.glass .tn-atom');
      atoms.forEach(atom => {
        enhance(atom);
        const mo = new MutationObserver(() => {
          if (!atom.querySelector('.glx-vignette')) enhance(atom);
        });
        mo.observe(atom, { childList: true });
      });
    }

    init();
  }

  // ===========================================
  // СКРИПТ ДЛЯ ГОРИЗОНТАЛЬНОГО СЛАЙДЕРА
  // ===========================================
  function initSlider() {
    function initDots() {
      document.querySelectorAll('.bar').forEach(bar => {
        let host = bar.querySelector(':scope > div') || bar.querySelector('div');
        if (!host) return;
        host.classList.add('bar-dots');
        host.querySelectorAll(':scope > .bar-dot').forEach(n => n.remove());
        for (let i = 0; i < 7; i++) {
          const dot = document.createElement('div');
          dot.className = 'bar-dot';
          host.appendChild(dot);
        }
      });
    }

    function getSliderFor(anchor) {
      let s = anchor.parentElement && anchor.parentElement.querySelector('.slider');
      if (!s) s = anchor.closest && anchor.closest('.slider');
      if (!s) s = document.querySelector('.slider');
      return s || null;
    }

    function getStep(slider) {
      const slide = slider.querySelector('.slide');
      const space = slider.querySelector('.space');
      const wSlide = slide ? slide.getBoundingClientRect().width : 0;
      const wSpace = space ? space.getBoundingClientRect().width : 0;
      return wSlide + wSpace;
    }

    function initArrows() {
      document.addEventListener('click', function (e) {
        const a = e.target.closest && e.target.closest('a[href="#right"], a[href="#left"]');
        if (!a) return;
        e.preventDefault();

        const slider = getSliderFor(a);
        if (!slider) return;

        const step = getStep(slider);
        if (a.getAttribute('href') === '#right') {
          slider.scrollLeft += step;
        } else {
          slider.scrollLeft -= step;
        }
      }, { passive: false });
    }

    initDots();
    initArrows();
  }

  // ===========================================
  // ИНИЦИАЛИЗАЦИЯ ВСЕХ СКРИПТОВ
  // ===========================================
  function initAll() {
    initBlurAnimation();
    initGlassEffect();
    initSlider();
  }

  // Запуск при загрузке страницы
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAll);
  } else {
    initAll();
  }

  // Повторная инициализация при полной загрузке страницы
  window.addEventListener('load', initAll);

})();
